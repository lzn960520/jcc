compile_unit
	::=
	{ using_statement }
	{ module_def | class_declaration | interface_declaration }
using_statement
	::= "using" class_name ";"
module_def
	::= "module" module_name "begin" { class_declaration | interface_declaration } "end" ";"
module_name
	::=
	  identifier
	| module_name "::" identifier
class_declaration
	::= "class" identifier
		[ "extends" class_name ]
		{ "implements" interface_name } 
		"begin" { member_defination | function_defination } "end" ";"
interface_declaration
	::= "interface" identifier "begin" { function_declaration } "end" ";"
identifier
	::= ( letter | "_" ) { letter | digit | "_" }
letter
	::= "a..z,A..Z"
digit
	::= "0..9"
class_name
	::=
	  identifier
	| module_name "::" identifier
interface_name
	::=
	  identifier
	| module_name "::" identifier
member_defination
	::= [ "static" ]
		( "private" | "public" | "protected" )
		[ "const" ]
		variable_defination ";"
variable_defination
	::= type_name identifier [ "=" expression ] { "," identifier [ "=" expression ] }
function_declaration
	::=
	  "function" identifier "(" [ type_name identifier { "," type_name identifier } ] ")" ":" type_name ";"
	| "procedure" identifier "(" [ type_name identifier { "," type_name identifier} ] ")" ";"
expression
	::=
	  ( expression
		( "+" | "-" | "*" | "/" | "**" | "%"
		| "<" | "<=" | ">" | ">=" | "==" | "!=" | "<>"
		| "|" | "&"  | "^"
		| "||" | "&&" | "^^"
		| "<<" | ">>" 
		| "+=" | "-=" | "*=" | "/=" | "**=" | "%="
		| "|=" | "&=" | "^="
		| "||=" | "&&=" | "^^="
		| "<<=" | ">>="
		| "=" )
		expression )
	| "(" expression ")"
	| ( "!" | "~" | "++" | "--" | "-" ) expression
	| expression ( "++" | "--" )
	| identifier
	| class_name "::" identifier
	| expression "." identifier
	| function_call
	| literal
	| "new" class_name "(" [ expression { "," expression } ] ")"
	| "new" type_name "[" expression { "," expression } "]"
	| "delete" expression
	| expression array_accessor
	| "[[" expression { "," expression } "]]"
	| type_name "(" expression ")"
array_accessor
	::= "[" expression { "," expression } "]"
literal
	::=
	  literal_int
	| literal_string
	| literal_float
	| literal_double
	| literal_bool
literal_int
	::=
	  ( "+" | "-" ) ( "0-9" ) { "0-9" }
	| "0"
	| "1-9" { "0-9" }
	| ( "0x" | "0X" ) "0-9a-fA-F" { "0-9a-fA-F" }
	| "0,1" { "0,1" } "b"
literal_string
	::= "\"" ".*" "\""
literal_float
	::=
	  [ "+" | "-" ] "0" "." "0-9" { "0-9" } "f"
	| [ "+" | "-" ] "." "0-9" { "0-9" } "f"
	| [ "+" | "-" ] "1-9" { "0-9" } "." "0-9" { "0-9" } "f"
literal_double
	::=
	  [ "+" | "-" ] "0" "." "0-9" { "0-9" }
	| [ "+" | "-" ] "." "0-9" { "0-9" }
	| [ "+" | "-" ] "1-9" { "0-9" } "." "0-9" { "0-9" }
literal_bool
	::= "true" | "false"
function_call
	::=
	  identifier "(" [ expression { "," expression } ] ")"
	| expression "." identifier "(" [ expression { "," expression } ] ")"
	| class_name "::" identifier "(" [ expression { "," expression } ] ")"
array_definator
	::= "[" ( ( expression ".." ) | ( expression ".." expression ) ) { "," ( ( expression ".." ) | ( expression ".." expression ) ) } "]"
type_name
	::=
	  base_type
	| "[[" type_name { "," type_name } "]]"
	| class_name
	| interface_name
	| type_name array_definator
base_type
	::= ( [ "unsigned" ] ( "byte" | "short" | "int" ) ) | "char" | "float" | "double" | "string"
function_defination
	::=
	  [ "static" ] ( "private" | "public" | "protected" ) "function" identifier "(" [ type_name identifier { "," type_name identifier } ] ")" ":" type_name "begin" statement_list "end"
	| [ "static" ] ( "private" | "public" | "protected" ) "procedure" identifier "(" [ type_name identifier { "," type_name identifier } ] ")" "begin" statement_list "end"
statement
	::=
	  "var" variable_defination
	| expression
	| if_statement
	| while_statement
	| for_statement
	| repeat_statement
	| case_statement
	| break_statement
	| continue_statement
	| return_statement
	| "begin" statement_list "end"
statement_list
	::= { statement ";" } [ statement ]
if_statement
	::= "if" expression "then" statement [ "else" statement ]
while_statement
	::= "while" expression "do" statement
for_statement
	::= "for" "(" [ "var" variable_defination | expression ] ";" [ expression ] ";" [ expression ] ")" "do" statement
repeat_statement
	::= "repeat" statement_list "until" expression
case_statement
	::= "case" expression "of" { expression ":" statement_list } ["else " statement_list]"end"
break_statement
	::= "break"
continue_statement
	::= "continue"
return_statement
	::= "return" [ expression ]